// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/find/{userid}": {
            "get": {
                "description": "the email id password, verifies if the email already exist in the database, if it doesnt exist then it creates a new user and returns an automatically generated userId",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "signup"
                ],
                "summary": "used to signup a new user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "userid",
                        "name": "userid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.RespSuccessFind"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.RespError"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/main.RespError"
                        }
                    }
                }
            }
        },
        "/like/{cmd}/{userid}/{bookid}": {
            "get": {
                "description": "the email id password, verifies if the email already exist in the database, if it doesnt exist then it creates a new user and returns an automatically generated userId",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "signup"
                ],
                "summary": "used to signup a new user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "userid",
                        "name": "userid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "bookid",
                        "name": "bookid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "add or remove command",
                        "name": "cmd",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.RespSuccess"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.RespError"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/main.RespError"
                        }
                    }
                }
            }
        },
        "/signup": {
            "post": {
                "description": "the email id password, verifies if the email already exist in the database, if it doesnt exist then it creates a new user and returns an automatically generated userId",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "signup"
                ],
                "summary": "used to signup a new user",
                "parameters": [
                    {
                        "description": "get data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.userdata"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.RespSuccessSignUp"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "main.RespError": {
            "type": "object",
            "required": [
                "message"
            ],
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Error"
                }
            }
        },
        "main.RespSuccess": {
            "type": "object",
            "required": [
                "message"
            ],
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Data Updated Successfully"
                }
            }
        },
        "main.RespSuccessFind": {
            "type": "object",
            "required": [
                "message"
            ],
            "properties": {
                "message": {
                    "$ref": "#/definitions/main.responseFind"
                }
            }
        },
        "main.RespSuccessSignUp": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "example": "507c7f79bcf86cd7994f6c0e"
                }
            }
        },
        "main.responseFind": {
            "type": "object",
            "required": [
                "email",
                "liked"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "adi@gmail.com"
                },
                "id": {
                    "type": "string",
                    "example": "507c7f79bcf86cd7994f6c0e"
                },
                "liked": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[507f1f77bcf86cd799439011",
                        "507f1f77bcf86cd799439011]"
                    ]
                }
            }
        },
        "main.userdata": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "liked": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "password": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register("swagger", &s{})
}
