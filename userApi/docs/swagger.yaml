definitions:
  main.RespError:
    properties:
      message:
        example: Error
        type: string
    required:
    - message
    type: object
  main.RespSuccess:
    properties:
      message:
        example: Data Updated Successfully
        type: string
    required:
    - message
    type: object
  main.RespSuccessFind:
    properties:
      message:
        $ref: '#/definitions/main.responseFind'
    required:
    - message
    type: object
  main.RespSuccessSignUp:
    properties:
      id:
        example: 507c7f79bcf86cd7994f6c0e
        type: string
    required:
    - id
    type: object
  main.responseFind:
    properties:
      email:
        example: adi@gmail.com
        type: string
      id:
        example: 507c7f79bcf86cd7994f6c0e
        type: string
      liked:
        example:
        - '[507f1f77bcf86cd799439011'
        - 507f1f77bcf86cd799439011]
        items:
          type: string
        type: array
    required:
    - email
    - liked
    type: object
  main.userdata:
    properties:
      email:
        type: string
      liked:
        items:
          type: string
        type: array
      password:
        type: string
    required:
    - email
    - password
    type: object
info:
  contact: {}
paths:
  /find/{userid}:
    get:
      consumes:
      - application/json
      description: the email id password, verifies if the email already exist in the
        database, if it doesnt exist then it creates a new user and returns an automatically
        generated userId
      parameters:
      - description: userid
        in: path
        name: userid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.RespSuccessFind'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/main.RespError'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/main.RespError'
      summary: used to signup a new user
      tags:
      - signup
  /like/{cmd}/{userid}/{bookid}:
    get:
      consumes:
      - application/json
      description: the email id password, verifies if the email already exist in the
        database, if it doesnt exist then it creates a new user and returns an automatically
        generated userId
      parameters:
      - description: userid
        in: path
        name: userid
        required: true
        type: string
      - description: bookid
        in: path
        name: bookid
        required: true
        type: string
      - description: add or remove command
        in: path
        name: cmd
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.RespSuccess'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/main.RespError'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/main.RespError'
      summary: used to signup a new user
      tags:
      - signup
  /signup:
    post:
      consumes:
      - application/json
      description: the email id password, verifies if the email already exist in the
        database, if it doesnt exist then it creates a new user and returns an automatically
        generated userId
      parameters:
      - description: get data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/main.userdata'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.RespSuccessSignUp'
      summary: used to signup a new user
      tags:
      - signup
swagger: "2.0"
